#!/bin/bash

# üß™ Script de Teste - Bloco 2: Gest√£o de Usu√°rios
# Executa todos os testes de gest√£o de usu√°rios

echo "üë• TESTANDO BLOCO 2: GEST√ÉO DE USU√ÅRIOS"
echo "========================================"

# Configura√ß√µes
API_URL="https://sameday-sameday-api.psvs5z.easypanel.host"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para obter token
get_token() {
    curl -s -X POST "$API_URL/v2/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"username":"13161974417","password":"Tentarlogar580","platform":"portal"}' \
        | jq -r '.token.access_token // empty'
}

# Fun√ß√£o para testar endpoint com autentica√ß√£o
test_auth_endpoint() {
    local method=$1
    local url=$2
    local data=$3
    local description=$4
    local token=$5
    
    echo -n "Testando: $description... "
    
    if [ -n "$data" ]; then
        response=$(curl -s -X $method "$url" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token" \
            -d "$data")
    else
        response=$(curl -s -X $method "$url" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token")
    fi
    
    # Verificar se a resposta cont√©m "success" ou "error"
    if echo "$response" | grep -q '"status":"success"'; then
        echo -e "${GREEN}‚úÖ SUCESSO${NC}"
        echo "   Resposta: $(echo $response | jq -r '.message // .status')"
    elif echo "$response" | grep -q '"status":"error"'; then
        echo -e "${YELLOW}‚ö†Ô∏è  ERRO ESPERADO${NC}"
        echo "   Resposta: $(echo $response | jq -r '.message // .status')"
    else
        echo -e "${RED}‚ùå FALHA${NC}"
        echo "   Resposta: $response"
    fi
    echo ""
}

# Obter token de autentica√ß√£o
echo "üîë Obtendo token de autentica√ß√£o..."
TOKEN=$(get_token)

if [ -z "$TOKEN" ]; then
    echo -e "${RED}‚ùå ERRO: N√£o foi poss√≠vel obter token de autentica√ß√£o${NC}"
    echo "Verifique se o login est√° funcionando corretamente"
    exit 1
fi

echo -e "${GREEN}‚úÖ Token obtido com sucesso${NC}"
echo ""

# 1. Listar Usu√°rios
echo "1. TESTE DE LISTAGEM DE USU√ÅRIOS"
echo "--------------------------------"
test_auth_endpoint "GET" "$API_URL/v2/user/all" "" "Listar todos os usu√°rios" "$TOKEN"

# 2. Buscar Usu√°rio
echo "2. TESTE DE BUSCA DE USU√ÅRIO"
echo "----------------------------"
test_auth_endpoint "GET" "$API_URL/v2/user/1" "" "Buscar usu√°rio por ID" "$TOKEN"

test_auth_endpoint "GET" "$API_URL/v2/user/document?document=13161974417" "" "Buscar usu√°rio por CPF" "$TOKEN"

test_auth_endpoint "GET" "$API_URL/v2/user/email?email=joao@teste.com" "" "Buscar usu√°rio por email" "$TOKEN"

# 3. Gerenciar Usu√°rio
echo "3. TESTE DE GERENCIAMENTO DE USU√ÅRIO"
echo "------------------------------------"
test_auth_endpoint "PUT" "$API_URL/v2/user/1" \
    '{"name":"Jo√£o Silva Atualizado","email":"joao.novo@teste.com"}' \
    "Atualizar usu√°rio" "$TOKEN"

test_auth_endpoint "PUT" "$API_URL/v2/user/1/status" \
    '{"active":false}' \
    "Desativar usu√°rio" "$TOKEN"

test_auth_endpoint "PUT" "$API_URL/v2/user/1/status" \
    '{"active":true}' \
    "Ativar usu√°rio" "$TOKEN"

# 4. Teste de Cria√ß√£o de Usu√°rio
echo "4. TESTE DE CRIA√á√ÉO DE USU√ÅRIO"
echo "------------------------------"
test_auth_endpoint "POST" "$API_URL/v2/user" \
    '{"name":"Teste Usu√°rio","email":"teste@usuario.com","cpfcnpj":"11122233344","password":"senha123","typeUser":"client","profile":"client"}' \
    "Criar novo usu√°rio" "$TOKEN"

echo "üéØ RESUMO DOS TESTES DE GEST√ÉO DE USU√ÅRIOS"
echo "==========================================="
echo "‚úÖ Testes executados com sucesso!"
echo "üìù Verifique os resultados acima para identificar problemas"
echo "üîß Ajuste a API conforme necess√°rio"
echo ""
echo "Pr√≥ximo passo: Execute ./test-orders.sh para testar gest√£o de pedidos"

